import React, { useState } from "react";
import { APP_CONFIG } from "../utils/constants";

const Contact = () => {
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    subject: "",
    message: "",
    reason: "general",
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitStatus, setSubmitStatus] = useState(null);

  const contactReasons = [
    { value: "general", label: "C√¢u h·ªèi chung", icon: "üí¨" },
    { value: "collaboration", label: "H·ª£p t√°c & Partnership", icon: "ü§ù" },
    { value: "contribution", label: "ƒê√≥ng g√≥p n·ªôi dung", icon: "‚úçÔ∏è" },
    { value: "technical", label: "V·∫•n ƒë·ªÅ k·ªπ thu·∫≠t", icon: "üîß" },
    { value: "feedback", label: "G√≥p √Ω & Ph·∫£n h·ªìi", icon: "üí°" },
  ];

  const contactMethods = [
    {
      type: "Email",
      value: APP_CONFIG.CONTACT_EMAIL,
      icon: "üìß",
      description: "G·ª≠i email cho b·∫£nk n√®, ph·∫£n h·ªìi trong v√≤ng 24 gi·ªù lu√¥n √°!",
      action: `mailto:${APP_CONFIG.CONTACT_EMAIL}`,
      actionText: "G·ª≠i email",
    },
    {
      type: "Social Media",
      value: "Theo d√µi b·∫£nk",
      icon: "üåê",
      description: "K·∫øt n·ªëi v√† theo d√µi update m·ªõi nh·∫•t t·ª´ LocalBy nha",
      action: null,
      actionText: "Theo d√µi",
    },
    {
      type: "Community",
      value: "Tham gia c·ªông ƒë·ªìng",
      icon: "üë•",
      description: "Gia nh·∫≠p c·ªông ƒë·ªìng LocalBy ƒë·ªÉ chia s·∫ª v√† k·∫øt n·ªëi v·ªõi b·∫£nk",
      action: "/community",
      actionText: "Tham gia",
    },
  ];

  const faqItems = [
    {
      question: "L√†m th·∫ø n√†o ƒë·ªÉ chia s·∫ª c√¢u chuy·ªán du l·ªãch c·ªßa t√¥i?",
      answer:
        "B·∫°n c√≥ th·ªÉ g·ª≠i c√¢u chuy·ªán qua form li√™n h·ªá ho·∫∑c email tr·ª±c ti·∫øp. B·∫£nk s·∫Ω h·ªó tr·ª£ b·∫°n trong qu√° tr√¨nh bi√™n t·∫≠p v√† xu·∫•t b·∫£n nha!",
    },
    {
      question: "T√¥i c√≥ th·ªÉ h·ª£p t√°c v·ªõi LocalBy nh∆∞ th·∫ø n√†o?",
      answer:
        "LocalBy lu√¥n ch√†o ƒë√≥n c√°c h√¨nh th·ª©c h·ª£p t√°c t·ª´ t√°c gi·∫£ c√° nh√¢n, doanh nghi·ªáp du l·ªãch ƒë·∫øn c√°c t·ªï ch·ª©c vƒÉn h√≥a. H√£y li√™n h·ªá v·ªõi b·∫£nk ƒë·ªÉ th·∫£o lu·∫≠n chi ti·∫øt nha!",
    },
    {
      question: "C√≥ ph√≠ ƒë·ªÉ ƒëƒÉng b√†i tr√™n LocalBy kh√¥ng?",
      answer:
        "Kh√¥ng ƒë√¢u! Vi·ªác chia s·∫ª c√¢u chuy·ªán tr√™n LocalBy ho√†n to√†n mi·ªÖn ph√≠ lu√¥n. B·∫£nk tin r·∫±ng nh·ªØng c√¢u chuy·ªán hay c·∫ßn ƒë∆∞·ª£c chia s·∫ª r·ªông r√£i m√†.",
    },
    {
      question: "T√¥i c√≥ th·ªÉ s·ª≠ d·ª•ng n·ªôi dung t·ª´ LocalBy kh√¥ng?",
      answer:
        "Vui l√≤ng li√™n h·ªá v·ªõi b·∫£nk tr∆∞·ªõc khi s·ª≠ d·ª•ng n·ªôi dung nha. B·∫£nk s·∫Ω h∆∞·ªõng d·∫´n b·∫°n v·ªÅ quy·ªÅn s·ª≠ d·ª•ng v√† ghi credit ph√π h·ª£p.",
    },
  ];

  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value,
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);

    // Simulate form submission
    try {
      await new Promise((resolve) => setTimeout(resolve, 2000));
      setSubmitStatus("success");
      setFormData({
        name: "",
        email: "",
        subject: "",
        message: "",
        reason: "general",
      });
    } catch (error) {
      setSubmitStatus("error");
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="contact-page">
      {/* Hero Section */}
      <section className="contact-hero">
        <div className="contact-hero-background"></div>
        <div className="container">
          <div className="contact-hero-content">
            <h1 className="contact-hero-title">
              <span className="title-line">Chat v·ªõi</span>
              <span className="title-line gradient-text">b·∫£nk n√®!</span>
            </h1>
            <p className="contact-hero-description">
              B·∫£nk lu√¥n s·∫µn s√†ng l·∫Øng nghe v√† h·ªó tr·ª£ b·∫°n ƒë·∫•y! H√£y chia s·∫ª c√¢u
              h·ªèi, √Ω t∆∞·ªüng ho·∫∑c c√¢u chuy·ªán du l·ªãch c·ªßa b·∫°n v·ªõi b·∫£nk nha. LocalBy
              m√†, chill chill th√¥i! üòé
            </p>
            <div className="hero-stats">
              <div className="stat-item">
                <span className="stat-icon">‚ö°</span>
                <span
                  className="stat-text"
                  style={{
                    color: "rgba(255, 255, 255, 0.95)",
                    fontWeight: "600",
                    textShadow: "0 1px 2px rgba(0, 0, 0, 0.3)",
                  }}
                >
                  Ph·∫£n h·ªìi trong 24h
                </span>
              </div>
              <div className="stat-item">
                <span className="stat-icon">üë•</span>
                <span
                  className="stat-text"
                  style={{
                    color: "rgba(255, 255, 255, 0.95)",
                    fontWeight: "600",
                    textShadow: "0 1px 2px rgba(0, 0, 0, 0.3)",
                  }}
                >
                  H·ªó tr·ª£ t·∫≠n t√¨nh
                </span>
              </div>
              <div className="stat-item">
                <span className="stat-icon">üåü</span>
                <span
                  className="stat-text"
                  style={{
                    color: "rgba(255, 255, 255, 0.95)",
                    fontWeight: "600",
                    textShadow: "0 1px 2px rgba(0, 0, 0, 0.3)",
                  }}
                >
                  D·ªãch v·ª• mi·ªÖn ph√≠
                </span>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Contact Methods */}
      <section className="contact-methods">
        <div className="container">
          <h2 className="section-title">
            <span className="text-gradient">üìû C√°ch li√™n h·ªá v·ªõi b·∫£nk</span>
          </h2>
          <div className="methods-grid">
            {contactMethods.map((method, index) => (
              <div
                key={index}
                className="method-card fade-in-up"
                style={{ animationDelay: `${index * 0.1}s` }}
              >
                <div className="method-icon">{method.icon}</div>
                <h3 className="method-type">{method.type}</h3>
                <p className="method-value">{method.value}</p>
                <p className="method-description">{method.description}</p>
                {method.type === "Social Media" ? (
                  <div className="social-actions">
                    {Object.entries(APP_CONFIG.SOCIAL_LINKS).map(
                      ([platform, link]) => (
                        <a
                          key={platform}
                          href={link}
                          target="_blank"
                          rel="noopener noreferrer"
                          className="social-button"
                        >
                          {platform === "facebook" && "üìò"}
                          {platform === "instagram" && "üì∑"}
                          {platform === "youtube" && "üì∫"}
                          <span>
                            {platform.charAt(0).toUpperCase() +
                              platform.slice(1)}
                          </span>
                        </a>
                      ),
                    )}
                  </div>
                ) : (
                  <a
                    href={method.action || "#"}
                    className="method-action"
                    {...(method.action?.startsWith("mailto:")
                      ? {}
                      : { target: "_blank", rel: "noopener noreferrer" })}
                  >
                    {method.actionText}
                    <span className="action-arrow">‚Üí</span>
                  </a>
                )}
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* Contact Form */}
      <section className="contact-form-section">
        <div className="container">
          <div className="form-container">
            <div className="form-header">
              <h2 className="form-title">
                <span className="text-gradient">‚úâÔ∏è G·ª≠i tin nh·∫Øn cho b·∫£nk</span>
              </h2>
              <p className="form-description">
                ƒêi·ªÅn th√¥ng tin b√™n d∆∞·ªõi v√† b·∫£nk s·∫Ω ph·∫£n h·ªìi b·∫°n s·ªõm nh·∫•t c√≥ th·ªÉ
                nha! üí™
              </p>
            </div>

            <form onSubmit={handleSubmit} className="contact-form">
              {/* Contact Reason */}
              <div className="form-group full-width">
                <label className="form-label">L√Ω do li√™n h·ªá</label>
                <div className="reason-options">
                  {contactReasons.map((reason) => (
                    <label key={reason.value} className="reason-option">
                      <input
                        type="radio"
                        name="reason"
                        value={reason.value}
                        checked={formData.reason === reason.value}
                        onChange={handleChange}
                        className="reason-input"
                      />
                      <div className="reason-label">
                        <span className="reason-icon">{reason.icon}</span>
                        <span className="reason-text">{reason.label}</span>
                      </div>
                    </label>
                  ))}
                </div>
              </div>

              {/* Name and Email */}
              <div className="form-row">
                <div className="form-group">
                  <label htmlFor="name" className="form-label">
                    H·ªç t√™n <span className="required">*</span>
                  </label>
                  <input
                    type="text"
                    id="name"
                    name="name"
                    value={formData.name}
                    onChange={handleChange}
                    required
                    className="form-input"
                    placeholder="Nh·∫≠p h·ªç t√™n c·ªßa b·∫°n"
                  />
                </div>

                <div className="form-group">
                  <label htmlFor="email" className="form-label">
                    Email <span className="required">*</span>
                  </label>
                  <input
                    type="email"
                    id="email"
                    name="email"
                    value={formData.email}
                    onChange={handleChange}
                    required
                    className="form-input"
                    placeholder="example@email.com"
                  />
                </div>
              </div>

              {/* Subject */}
              <div className="form-group full-width">
                <label htmlFor="subject" className="form-label">
                  Ch·ªß ƒë·ªÅ
                </label>
                <input
                  type="text"
                  id="subject"
                  name="subject"
                  value={formData.subject}
                  onChange={handleChange}
                  className="form-input"
                  placeholder="T√≥m t·∫Øt n·ªôi dung b·∫°n mu·ªën trao ƒë·ªïi"
                />
              </div>

              {/* Message */}
              <div className="form-group full-width">
                <label htmlFor="message" className="form-label">
                  Tin nh·∫Øn <span className="required">*</span>
                </label>
                <textarea
                  id="message"
                  name="message"
                  rows="6"
                  value={formData.message}
                  onChange={handleChange}
                  required
                  className="form-textarea"
                  placeholder="Chia s·∫ª chi ti·∫øt v·ªÅ ƒëi·ªÅu b·∫°n mu·ªën trao ƒë·ªïi v·ªõi b·∫£nk..."
                ></textarea>
              </div>

              {/* Submit Status */}
              {submitStatus === "success" && (
                <div className="submit-status success">
                  <span className="status-icon">‚úÖ</span>
                  <span>
                    C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá! B·∫£nk s·∫Ω ph·∫£n h·ªìi s·ªõm nh·∫•t c√≥ th·ªÉ nha!
                    ü•∞
                  </span>
                </div>
              )}

              {submitStatus === "error" && (
                <div className="submit-status error">
                  <span className="status-icon">‚ùå</span>
                  <span>
                    C√≥ l·ªói x·∫£y ra r·ªìi! Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá tr·ª±c ti·∫øp
                    qua email nha.
                  </span>
                </div>
              )}

              {/* Submit Button */}
              <button
                type="submit"
                className="submit-button"
                disabled={isSubmitting}
              >
                {isSubmitting ? (
                  <>
                    <span className="submit-spinner"></span>
                    ƒêang g·ª≠i...
                  </>
                ) : (
                  <>
                    <span>üöÄ</span>
                    G·ª≠i tin nh·∫Øn cho b·∫£nk
                  </>
                )}
              </button>
            </form>
          </div>
        </div>
      </section>

      {/* FAQ Section */}
      <section className="contact-faq">
        <div className="container">
          <h2 className="section-title">
            <span className="text-gradient">‚ùì C√¢u h·ªèi th∆∞·ªùng g·∫∑p</span>
          </h2>
          <div className="faq-grid">
            {faqItems.map((item, index) => (
              <div
                key={index}
                className="faq-item fade-in-up"
                style={{ animationDelay: `${index * 0.1}s` }}
              >
                <h3 className="faq-question">{item.question}</h3>
                <p className="faq-answer">{item.answer}</p>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="contact-cta">
        <div className="container">
          <div className="cta-content">
            <h2 className="cta-title">
              B·∫°n c√≥ c√¢u chuy·ªán du l·ªãch hay mu·ªën chia s·∫ª v·ªõi b·∫£nk kh√¥ng?
            </h2>
            <p className="cta-description">
              ƒê·ª´ng ch·∫ßn ch·ª´! H√£y chia s·∫ª nh·ªØng tr·∫£i nghi·ªám ƒë·ªôc ƒë√°o c·ªßa b·∫°n v·ªõi
              b·∫£nk v√† c·ªông ƒë·ªìng LocalBy. C√¢u chuy·ªán c·ªßa b·∫°n c√≥ th·ªÉ truy·ªÅn c·∫£m
              h·ª©ng cho h√†ng ng√†n ng∆∞·ªùi kh√°c ƒë·∫•y! üåü
            </p>
            <div className="cta-actions">
              <a href="#contact-form" className="cta-button primary">
                <span>‚úçÔ∏è</span>
                Chia s·∫ª ngay v·ªõi b·∫£nk
              </a>
              <a href="/blog" className="cta-button secondary">
                <span>üìñ</span>
                Xem c√°c c√¢u chuy·ªán kh√°c
              </a>
            </div>
          </div>
        </div>
      </section>
    </div>
  );
};

export default Contact;
